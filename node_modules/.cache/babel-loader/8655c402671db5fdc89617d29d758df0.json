{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\antag\\\\MyReads-master\\\\MyReads-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\antag\\\\MyReads-master\\\\MyReads-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"C:\\\\Users\\\\antag\\\\MyReads-master\\\\MyReads-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\antag\\\\MyReads-master\\\\MyReads-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\antag\\\\MyReads-master\\\\MyReads-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\antag\\\\MyReads-master\\\\MyReads-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\antag\\\\MyReads-master\\\\MyReads-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\antag\\\\MyReads-master\\\\MyReads-master\\\\src\\\\Provider.js\";\nimport React, { Component } from \"react\";\n\nvar Provider = /*#__PURE__*/function (_Component) {\n  _inherits(Provider, _Component);\n\n  function Provider() {\n    var _this;\n\n    _classCallCheck(this, Provider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Provider).call(this));\n    _this.state = {\n      books: [],\n      currentlyReading: [],\n      wantToRead: [],\n      read: [],\n      setBooks: function setBooks(books) {\n        var currentlyReading = books.filter(function (book) {\n          return book.shelf === \"currentlyReading\";\n        });\n        var wantToRead = books.filter(function (book) {\n          return book.shelf === \"wantToRead\";\n        });\n        var read = books.filter(function (book) {\n          return book.shelf === \"read\";\n        });\n\n        _this.setState({\n          books: books,\n          currentlyReading: currentlyReading,\n          wantToRead: wantToRead,\n          read: read\n        });\n      },\n      updateBookShelf: function updateBookShelf(book, newShelf) {\n        // TOFIX\n\n        /*\n        Terrible implementation :D, needs modification.\n        Logic:\n          * check if book already exists, if so\n            * Change ONLY the required book:\n              - if newShelf is none >> exclude shelf property from book object\n              - if anyOtherShelf just update shelf normally\n          * if book doesn't exists in myReads => updateBookList with the new one.\n        */\n        var updatedBookList = _this.state.books.map(function (bookEach) {\n          var bookToChange = _this.state.books.find(function (bookItr) {\n            return bookItr.id === book.id;\n          });\n\n          if (bookToChange && bookToChange.id === bookEach.id) {\n            console.log(book);\n\n            if (newShelf === \"none\") {\n              var _bookEach = bookEach,\n                  none = _bookEach.shelf,\n                  removedBook = _objectWithoutProperties(_bookEach, [\"shelf\"]);\n\n              bookEach = removedBook;\n            }\n\n            bookEach.shelf = newShelf;\n          }\n\n          return bookEach;\n        });\n\n        _this.state.setBooks(updatedBookList);\n      } // updateBookShelf: (book, newShelf, bookShelves) => {\n      //   const updatedBookList = this.state.books.map((bookEach) => {\n      //     let bookId;\n      //     if (newShelf === \"none\" && book.id === bookEach.id) {\n      //       bookId = this.state.books.find((id) => id === bookEach.id);\n      //       const { shelf: none, ...removedBook } = bookEach;\n      //       console.log(bookEach, removedBook);\n      //       return removedBook;\n      //     } else {\n      //       bookId = bookShelves[newShelf].find((id) => id === bookEach.id);\n      //     }\n      //     if (bookId) bookEach.shelf = newShelf;\n      //     return bookEach;\n      //   });\n      //   this.state.setBooks(updatedBookList);\n      // },\n\n    };\n    return _this;\n  }\n\n  _createClass(Provider, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(MyContext.Provider, {\n        value: _objectSpread({}, this.state),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 7\n        }\n      }, this.props.children);\n    }\n  }]);\n\n  return Provider;\n}(Component);\n\nexport { Provider as default };\nexport var MyContext = React.createContext();","map":{"version":3,"sources":["C:/Users/antag/MyReads-master/MyReads-master/src/Provider.js"],"names":["React","Component","Provider","state","books","currentlyReading","wantToRead","read","setBooks","filter","book","shelf","setState","updateBookShelf","newShelf","updatedBookList","map","bookEach","bookToChange","find","bookItr","id","console","log","none","removedBook","props","children","MyContext","createContext"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEqBC,Q;;;AACnB,sBAAc;AAAA;;AAAA;;AACZ;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,gBAAgB,EAAE,EAFP;AAGXC,MAAAA,UAAU,EAAE,EAHD;AAIXC,MAAAA,IAAI,EAAE,EAJK;AAKXC,MAAAA,QAAQ,EAAE,kBAACJ,KAAD,EAAW;AACnB,YAAMC,gBAAgB,GAAGD,KAAK,CAACK,MAAN,CACvB,UAACC,IAAD;AAAA,iBAAUA,IAAI,CAACC,KAAL,KAAe,kBAAzB;AAAA,SADuB,CAAzB;AAGA,YAAML,UAAU,GAAGF,KAAK,CAACK,MAAN,CAAa,UAACC,IAAD;AAAA,iBAAUA,IAAI,CAACC,KAAL,KAAe,YAAzB;AAAA,SAAb,CAAnB;AACA,YAAMJ,IAAI,GAAGH,KAAK,CAACK,MAAN,CAAa,UAACC,IAAD;AAAA,iBAAUA,IAAI,CAACC,KAAL,KAAe,MAAzB;AAAA,SAAb,CAAb;;AAEA,cAAKC,QAAL,CAAc;AACZR,UAAAA,KAAK,EAALA,KADY;AAEZC,UAAAA,gBAAgB,EAAhBA,gBAFY;AAGZC,UAAAA,UAAU,EAAVA,UAHY;AAIZC,UAAAA,IAAI,EAAJA;AAJY,SAAd;AAMD,OAlBU;AAoBXM,MAAAA,eAAe,EAAE,yBAACH,IAAD,EAAOI,QAAP,EAAoB;AACnC;;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,YAAMC,eAAe,GAAG,MAAKZ,KAAL,CAAWC,KAAX,CAAiBY,GAAjB,CAAqB,UAACC,QAAD,EAAc;AACzD,cAAMC,YAAY,GAAG,MAAKf,KAAL,CAAWC,KAAX,CAAiBe,IAAjB,CACnB,UAACC,OAAD;AAAA,mBAAaA,OAAO,CAACC,EAAR,KAAeX,IAAI,CAACW,EAAjC;AAAA,WADmB,CAArB;;AAIA,cAAIH,YAAY,IAAIA,YAAY,CAACG,EAAb,KAAoBJ,QAAQ,CAACI,EAAjD,EAAqD;AACnDC,YAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;;AACA,gBAAII,QAAQ,KAAK,MAAjB,EAAyB;AAAA,8BACiBG,QADjB;AAAA,kBACRO,IADQ,aACfb,KADe;AAAA,kBACCc,WADD;;AAEvBR,cAAAA,QAAQ,GAAGQ,WAAX;AACD;;AACDR,YAAAA,QAAQ,CAACN,KAAT,GAAiBG,QAAjB;AACD;;AAED,iBAAOG,QAAP;AACD,SAfuB,CAAxB;;AAiBA,cAAKd,KAAL,CAAWK,QAAX,CAAoBO,eAApB;AACD,OAjDU,CAmDX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAlEW,KAAb;AAHY;AAuEb;;;;6BACQ;AACP,0BACE,oBAAC,SAAD,CAAW,QAAX;AAAoB,QAAA,KAAK,oBAAO,KAAKZ,KAAZ,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKuB,KAAL,CAAWC,QADd,CADF;AAKD;;;;EA/EmC1B,S;;SAAjBC,Q;AAkFrB,OAAO,IAAM0B,SAAS,GAAG5B,KAAK,CAAC6B,aAAN,EAAlB","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Provider extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      books: [],\n      currentlyReading: [],\n      wantToRead: [],\n      read: [],\n      setBooks: (books) => {\n        const currentlyReading = books.filter(\n          (book) => book.shelf === \"currentlyReading\"\n        );\n        const wantToRead = books.filter((book) => book.shelf === \"wantToRead\");\n        const read = books.filter((book) => book.shelf === \"read\");\n\n        this.setState({\n          books,\n          currentlyReading,\n          wantToRead,\n          read,\n        });\n      },\n\n      updateBookShelf: (book, newShelf) => {\n        // TOFIX\n        /*\n        Terrible implementation :D, needs modification.\n        Logic:\n          * check if book already exists, if so\n            * Change ONLY the required book:\n              - if newShelf is none >> exclude shelf property from book object\n              - if anyOtherShelf just update shelf normally\n          * if book doesn't exists in myReads => updateBookList with the new one.\n        */\n        const updatedBookList = this.state.books.map((bookEach) => {\n          const bookToChange = this.state.books.find(\n            (bookItr) => bookItr.id === book.id\n          );\n\n          if (bookToChange && bookToChange.id === bookEach.id) {\n            console.log(book);\n            if (newShelf === \"none\") {\n              const { shelf: none, ...removedBook } = bookEach;\n              bookEach = removedBook;\n            }\n            bookEach.shelf = newShelf;\n          }\n\n          return bookEach;\n        });\n\n        this.state.setBooks(updatedBookList);\n      },\n\n      // updateBookShelf: (book, newShelf, bookShelves) => {\n      //   const updatedBookList = this.state.books.map((bookEach) => {\n      //     let bookId;\n      //     if (newShelf === \"none\" && book.id === bookEach.id) {\n      //       bookId = this.state.books.find((id) => id === bookEach.id);\n      //       const { shelf: none, ...removedBook } = bookEach;\n      //       console.log(bookEach, removedBook);\n      //       return removedBook;\n      //     } else {\n      //       bookId = bookShelves[newShelf].find((id) => id === bookEach.id);\n      //     }\n      //     if (bookId) bookEach.shelf = newShelf;\n      //     return bookEach;\n      //   });\n      //   this.state.setBooks(updatedBookList);\n      // },\n    };\n  }\n  render() {\n    return (\n      <MyContext.Provider value={{ ...this.state }}>\n        {this.props.children}\n      </MyContext.Provider>\n    );\n  }\n}\n\nexport const MyContext = React.createContext();\n"]},"metadata":{},"sourceType":"module"}